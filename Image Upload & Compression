//in java

package com.developers.imagezipperdemo;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.content.FileProvider;
import android.support.v7.app.AppCompatActivity;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.developers.imagezipper.ImageZipper;
import com.github.angads25.filepicker.controller.DialogSelectionListener;
import com.github.angads25.filepicker.model.DialogConfigs;
import com.github.angads25.filepicker.model.DialogProperties;
import com.github.angads25.filepicker.view.FilePickerDialog;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import butterknife.BindView;
import butterknife.ButterKnife;

import static android.Manifest.permission.READ_EXTERNAL_STORAGE;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;

public class MainActivity extends AppCompatActivity {

    @BindView(R.id.result_image_view)
    ImageView result;
    @BindView(R.id.original_image_view)
    ImageView originalImage;
    @BindView(R.id.original_size)
    TextView originalSize;
    @BindView(R.id.compressed_size)
    TextView compressedSize;
    private static final int REQUEST_WRITE_PERMISSION = 20;
    private static final String TAG=MainActivity.class.getSimpleName();
    private String originalFilePath;
    private Uri imageUri;
    private static final int PHOTO_REQUEST = 10;
    Bitmap bitmap;
    private final int GALLERY = 1;
    private String upload_URL = "https://demonuts.com/Demonuts/JsonTest/Tennis/uploadVolley.php";
    JSONObject jsonObject;
    RequestQueue rQueue;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);

        if(Build.VERSION.SDK_INT>22){
            requestPermissions(new String[] {READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE}, 1);
        }


        DialogProperties properties = new DialogProperties();
        properties.selection_mode = DialogConfigs.SINGLE_MODE;
        properties.selection_type = DialogConfigs.FILE_SELECT;
        properties.root = new File(DialogConfigs.DEFAULT_DIR);
        properties.error_dir = new File(DialogConfigs.DEFAULT_DIR);
        properties.offset = new File(DialogConfigs.DEFAULT_DIR);
        properties.extensions=new String[]{ "jpg", "jpeg", "png", "gif" };
        properties.extensions = null;
        FilePickerDialog dialog = new FilePickerDialog(MainActivity.this,properties);
        dialog.setTitle("Select a File");
        dialog.setDialogSelectionListener(new DialogSelectionListener() {
            @Override
            public void onSelectedFilePaths(String[] files) {
                Log.d(TAG,files[0]+"");
                originalFilePath=files[0];

                File actualFile=new File(originalFilePath);
                try {
                    File imageZipperFile=new ImageZipper(MainActivity.this).setQuality(85).setMaxWidth(600).setMaxHeight(600).compressToFile(actualFile);
                    originalImage.setImageBitmap(BitmapFactory.decodeFile(actualFile.getAbsolutePath()));
                    int file_size = Integer.parseInt(String.valueOf(actualFile.length()/1024));
                    int result_file_size = Integer.parseInt(String.valueOf(imageZipperFile.length()/1024));
                    result.setImageBitmap(BitmapFactory.decodeFile(imageZipperFile.getAbsolutePath()));
                    Bitmap b=new ImageZipper(MainActivity.this).compressToBitmap(actualFile);
                    originalSize.setText(file_size+" Kb");
                    compressedSize.setText(result_file_size+" Kb");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        dialog.show();



    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == PHOTO_REQUEST && resultCode == RESULT_OK) {
            launchMediaScanIntent();
            try {
//                bitmap = decodeBitmapUri(this, imageUri);
//                originalImage.setImageBitmap(bitmap);

                File photo = new File(Environment.getExternalStorageDirectory(), "picture.jpg");
                imageUri = FileProvider.getUriForFile(MainActivity.this,
                        BuildConfig.APPLICATION_ID + ".provider", photo);

                File imageZipperFile=new ImageZipper(MainActivity.this).setQuality(85).setMaxWidth(600).setMaxHeight(600).compressToFile(photo);
                originalImage.setImageBitmap(BitmapFactory.decodeFile(photo.getAbsolutePath()));
                int file_size = Integer.parseInt(String.valueOf(photo.length()/1024));
                int result_file_size = Integer.parseInt(String.valueOf(imageZipperFile.length()/1024));
                result.setImageBitmap(BitmapFactory.decodeFile(imageZipperFile.getAbsolutePath()));
                Bitmap b=new ImageZipper(MainActivity.this).compressToBitmap(photo);
                originalSize.setText(file_size+" Kb");
                compressedSize.setText(result_file_size+" Kb");

                uploadImage(bitmap);



            } catch (Exception e) {
                Toast.makeText(this, "Failed to load Image.Please take pictures again", Toast.LENGTH_SHORT)
                        .show();

            }
        }
    }


    public void camera(View view){

        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        File photo = new File(Environment.getExternalStorageDirectory(), "picture.jpg");
        imageUri = FileProvider.getUriForFile(MainActivity.this,
                BuildConfig.APPLICATION_ID + ".provider", photo);
        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
        startActivityForResult(intent, PHOTO_REQUEST);



    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case REQUEST_WRITE_PERMISSION:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                } else {
                    Toast.makeText(MainActivity.this, "Permission Denied!", Toast.LENGTH_SHORT).show();
                }
        }
    }

    private Bitmap decodeBitmapUri(Context ctx, Uri uri) throws FileNotFoundException {
        int targetW = 600;
        int targetH = 600;
        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
        bmOptions.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(ctx.getContentResolver().openInputStream(uri), null, bmOptions);
        int photoW = bmOptions.outWidth;
        int photoH = bmOptions.outHeight;

        int scaleFactor = Math.min(photoW / targetW, photoH / targetH);
        bmOptions.inJustDecodeBounds = false;
        bmOptions.inSampleSize = scaleFactor;

        return BitmapFactory.decodeStream(ctx.getContentResolver()
                .openInputStream(uri), null, bmOptions);
    }

    private void launchMediaScanIntent() {
        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        mediaScanIntent.setData(imageUri);
        this.sendBroadcast(mediaScanIntent);
    }

    private void uploadImage(Bitmap bitmap){

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream);
        String encodedImage = Base64.encodeToString(byteArrayOutputStream.toByteArray(), Base64.DEFAULT);
        try {
            jsonObject = new JSONObject();
            String imgname = String.valueOf(Calendar.getInstance().getTimeInMillis());
            jsonObject.put("name", imgname);
            //  Log.e("Image name", etxtUpload.getText().toString().trim());
            jsonObject.put("image", encodedImage);
            // jsonObject.put("aa", "aa");
        } catch (JSONException e) {
            Log.e("JSONObject Here", e.toString());
        }
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST, upload_URL, jsonObject,
                new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject jsonObject) {
                        Log.e("aaaaaaa", jsonObject.toString());
                        rQueue.getCache().clear();
                        Toast.makeText(getApplication(), "Image Uploaded Successfully", Toast.LENGTH_SHORT).show();
                    }
                }, new Response.ErrorListener() {


            @Override
            public void onErrorResponse(VolleyError volleyError) {
                Log.e("aaaaaaa", volleyError.toString());

            }




        });



        rQueue = Volley.newRequestQueue(MainActivity.this);
        rQueue.add(jsonObjectRequest);

    }



}

///in xml
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical"
        tools:context="com.developers.imagezipperdemo.MainActivity">


        <Button
            android:layout_gravity="center"
            android:text="open Camera"
            android:onClick="camera"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"/>

        <Button
            android:layout_gravity="center"
            android:text="Choose Image"
            android:onClick="chooseimage"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"/>

        <ImageView
            android:id="@+id/original_image_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:layout_margin="5dp" />

        <TextView
            android:id="@+id/original_size"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:textColor="#000"
            android:textSize="18sp" />

        <ImageView
            android:id="@+id/result_image_view"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:layout_margin="5dp" />

        <TextView
            android:id="@+id/compressed_size"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:textColor="#000"
            android:textSize="18sp" />
    </LinearLayout>
</ScrollView>


//in gradle
 implementation 'com.github.angads25:filepicker:1.1.1'
 
 //reference
 
 https://github.com/amanjeetsingh150/ImageZipper?utm_source=android-arsenal.com&utm_medium=referral&utm_campaign=6016
